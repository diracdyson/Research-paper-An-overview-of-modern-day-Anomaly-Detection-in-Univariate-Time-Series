# -*- coding: utf-8 -*-
"""AMP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i-WtQV4e7pQ6dHkHzHe4ZGoxEz8setW2
"""

!pip install scikit_posthocs

!pip install yfinance

import pandas as pd 
import numpy as np
from sklearn.preprocessing import StandardScaler,MinMaxScaler
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
from scikit_posthocs import outliers_grubbs
from scikit_posthocs import outliers_tietjen
from scikit_posthocs import outliers_gesd
from sklearn.cluster import DBSCAN
from sklearn.ensemble import IsolationForest
from sklearn.neighbors import LocalOutlierFactor
from statsmodels.tsa.stattools import adfuller
import yfinance as yf
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.stattools import adfuller
from sklearn.neighbors import NearestNeighbors
from google.colab import drive

class AnomalyPaper():
    def __init__(self):
        drive.mount('drive')
        self.tsla=yf.download('TSLA','2015-11-3','2021-11-3')['Close']
        self.r=pd.read_csv('/content/drive/My Drive/Colab Notebooks/returnsant.csv')
        self.value=self.r['Factor - Value vs Growth']
        self.rate = self.r['Factor - Interest Rates']
        self.data= [self.tsla, self.value, self.rate]  
        
        print()  
        fig, axs= plt.subplots(len(self.data),1)
        self.tsla.plot(kind = 'box', ax =axs[0])  
        self.value.plot(kind ='box',ax =axs[1])
        self.rate.plot(kind ='box',ax =axs[2])



       

        plot_acf(self.tsla.values,c='r',title='plot of autocorrelation')
        plot_pacf(self.tsla.values,c='b',title='plot of partial autocorrelation')

        plot_acf(self.value.values,c='r',title='plot of autocorrelation')
        plot_pacf(self.value.values,c='b',title='plot of partial autocorrelation')
        
        plot_acf(self.rate.values,c='r',title='plot of autocorrelation')
        plot_pacf(self.rate.values,c='b',title='plot of partial autocorrelation')
        print()
    
    def station(self):
        adfres=[]
        for d in self.data:
            adfres.append(adfuller(d.values.reshape(-1,1))[1])
        adfres=np.array(adfres).reshape(-1,1)
        fr=pd.DataFrame(adfres) 
      #  fr.columns = 'Data'
        print(adfres)
        fr.index = ['Tsla','rate','value']
        fr.head()
        
    @staticmethod
    def histogram_boxplot(data,feature,figsize=(12,7),kde=True, bins=50):
        f2, (ax_box2, ax_hist2) = plt.subplots(nrows=2, sharex=True,gridspec_kw={"height_ratios" : (0.25, 0.75)},figsize=figsize)
        sns.boxplot(data=data, x=feature, ax=ax_box2, showmeans=True, color="violet")
        sns.histplot(data=data, x=feature, kde=kde, ax=ax_hist2,  bins=bins, palette="winter")
    #if bins else sns.histplot(
        #data=data, x=feature, kde=kde, ax=ax_hist2)
        ax_hist2.axvline(data[feature].mean(),color="green",linestyle="--")
        ax_hist2.axvline(data[feature].median(),color="black",linestyle="--")
    

    @staticmethod
    def check(v1,v2,p):
        index=[]
      #  print(v1.values.shape)
      #  print(v2.shape)
        for f,v in enumerate(v1.iloc[0:len(v1.values)-p]):
        #    print(f)
            if v!=v2[f]:
                index.append(f)
        index=np.array(index)       
        return index

    def tietjen(self,p=1):
       # resulttsla=outliers_tietjen(self.tesla.values,1,hypo=False,alpha=0.05)
       # resultrate=outliers_tietjen(self.rate.values,1,hypo=False,alpha=0.05)
       # resultval=outliers_tietjen(self.value.values,1,hypo=False,alpha=0.05)
        
       # indtsla = check(self.tesla.values,resulttsla)
       # indrate = check(self.rate.values, resultrate)
       # indval = check(self.value.values,resultval)

       # color = np.zeros(len(resulttsla.values))
       # color[indtsla]= 1
        
       # plt.scatter(self.tesla.index,self.tesla.values,c =color)
        
       # color2= np.zeros(len(resultrate.values ))
       # color2[indrate] = 1

       # plt.scatter( self.rate.index,self.rate.values, c = color2)


       # color3 = np.zeros(len(self.value.values))
       # color3[indval]

       # plt.scatter(self.value.index, self.value.values,c = color3)

       # plt.show()

        fig, axs= plt.subplots(len(self.data),1)
        i=0
        for d in self.data:
            
            result = outliers_tietjen(d.values,p, hypo=False,alpha=0.05)

            ind = self.check(d, result,p)

            color = np.zeros(len(d.values))
            
            color[ind] = 1

            axs[i].scatter(d.index,d.values, c =color)
    
            axs[i].set_title('Scatter plot of outlier for data set ' + str(i))
            
            axs[i].set_xlabel('Index over T')
            axs[i].set_ylabel(f"Data set "+str(i))
            

            i+=1
        plt.show()

    def esd(self,p=10):
      
        fig, axs= plt.subplots(len(self.data),1)
        i=0
        for d in self.data:
            
            result = outliers_gesd(d.values,p, hypo=False,alpha=0.05)
            #re turns the filtered array with all outliers removed
            inde = self.check(d, result,p)

            colore = np.zeros(len(d.values))
            
            colore[inde] = 1

            axs[i].scatter(d.index,d.values, c =colore)
    
            axs[i].set_title('Scatter plot of outlier for data set ' + str(i))
            
            axs[i].set_xlabel('Index over T')
            axs[i].set_ylabel(f"Data set "+str(i))
            

            i+=1
        plt.show()

    def IsoFor(self):
        fig, axs = plt.subplots(len(self.data),1)
        i=0
        for d in self.data:
            res= IsolationForest(random_state=0).fit_predict(d.values.reshape(-1,1))
            axs[i].scatter(d.index,d.values, c = res)
            
            axs[i].set_title('Scatter plot of outlier for data set '+str(i))
  
            axs[i].set_xlabel('Index over T')
            axs[i].set_ylabel("Data set "+str(i))
            
            i += 1
        plt.show()
    
    def LOF(self):
        fig, axs = plt.subplots(len(self.data),1)
        i=0
        for d in self.data:
            lf= LocalOutlierFactor(n_neighbors=2).fit_predict(d.values.reshape(-1,1))
            axs[i].scatter(d.index,d.values,c =lf)
            axs[i].set_title('Scatter plot of outlier for data set ' + str(i))
            axs[i].set_xlabel('Index over T')
            axs[i].set_ylabel('Data set ' +str(i))
            i+= 1
        plt.show()
    
    def db(self):
        fig,axs=plt.subplots(len(self.data),1)
        i=0
        for d in self.data:
            db = DBSCAN(eps = 1000, algorithm='kd_tree', p=1,min_samples = 10).fit(d)
            color =db.labels_
            axs[i].scatter(d.index,d.values, c= color)
            axs[i].set_title('Scatter plot of outlier for data set '+str(i))
            axs[i].set_xlabel('Index over T')
            axs[i].set_ylabel('Data set' +str(i))
            i+=1
        plt.show()

    def nn(self):
        fig, axs = plt.subplots(len(self.data),1)
        i=0
        for d in self.data:
            neigh = NearestNeighbors(n_neighbors=2)
            ind, distances = neigh.fit(d).kneighbors()
            distances = np.sort(distances,axis=0)
            axs[i].plot(distances)
            axs[i].set_title('K distance graph')
            axs[i].set_xlabel('data points')
            axs[i].set_ylabel('dist')
            i+=1
        plt.show()


    def randomforest(self):
        fig,axs= plt.subplots(len(self.data),1)
        i=0
        for d in self.data:
             rf =

a=AnomalyPaper()

a.station()

a.esd()

a.LOF()

a.IsoFor()

